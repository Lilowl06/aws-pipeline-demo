- name: Projet1
  hosts: dev
  become: yes

  vars: # permet de renseigner des variables
    user: aramis # ['aramis','portos'] ce n'est pas forcement une valeur simple, ca peut être une liste
    group: developers
  
  tasks:
    # on veut installer Apache, PHP et le driver qui fait qu'Apache comprend le format PHP.
    - name: Installe Apache + PHP
      apt: name={{ item }} state=latest # il comprend automatiquement que item doit être remplacé itérativement
      # par la liste des chaines de caractère de loop
      loop: ['apache2','php','libapache2-mod-php', 'mysql-server', 'php-mysql', 'pip']
      # les structure itérable que l'on place ici, donc une liste avec des chaines de caractères
      # chaque chaine de caractère correspond à un package que apt puet installer

    - name: Installe PyMySQL
      pip:
        name: PyMySQL==1.0.2
    
    - name: Démarre Apache + MySql
      service:
        name: '{{ item }}'
        state: started # on pourrait aussi mettre stop mais ca n'a pas d'intêret ici.
        enabled: yes # pour lancer le service à chaque démarrage de la machine
      loop: ['apache2', 'mysql']
    
    - name: Modifie owner/group du docRoot Apache
      file:
        path: /var/www/html
        owner: '{{ user }}'
        group: '{{ group }}'

    #- name: Copie du fichier index.php
    #  copy: 
    #    src: files/index.php # files/{{ item }}
    #    dest: /var/www/html
    #    owner: '{{ user }}'
    #    group: '{{ group }}' # permission 644 par défaut attribuée
      # loop: ['','','']
    # si on souhaite copier plusieurs fichiers : copie un fichier zip que l'on dépressera dans les machiines contrôlées
    # sinon on peut aussi faire une loop pour 10 fichiers ou moins

    #- name: Utilisation de template
    #  debug: 
        # msg: "coucou debug"
    #    msg: "{{ lookup('template', 'files/index.j2') }}"

    # On commente la copie du fichier car c'est une commande équivalente.
    - name: Création du fichier index.php (template)
      template:
        src: files/index.j2
        dest: /var/www/html/index.php


    - name: Suppression du fichier index.html
      file:
        path: /var/www/html/index.html
        state: absent

    - name : Création du groupe '{{ group }}' # tâche système de base.
      group: # nom du module
        name: '{{ group }}' #nom du groupe
        state: present
    
    - name: Création d'utilisateur {{ user }}
      user: # nom du module
        name: '{{ user }}' # '{{ item }}' # pour la création d'utilisateurs multiples, si on a tableau d'utilisateur
        state: present
        groups: '{{ group }}'
        shell: /bin/bash
        # loop: {{ user }}  # pour la création d'utilisateurs multiples,  si on a tableau d'utilisateur

    - name: Création de la base {{ user }} 
      mysql_db: # module qui permet de créer ou supprimer une database
      # je veux me connecter en tant que root (déjà défini en haut du fichier) 
      # et me connecter par socket (donc aucun mdp demandé quand on est root)
        login_unix_socket: /var/run/mysqld/mysqld.sock # tuyau pour communiquer avec le processus autre que protocole TCP
        name: '{{ user }}'
        state: present
    
    - name: Création de l'utilisateur {{ user }} pour le serveur mysql_d
      mysql_user:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        name: '{{user}}'
        password: 'abc1234'
        state: present
        priv: 'aramis.*:ALL' #permet d'avoir des droit étendus : sur toutes les tables et toutes les bases.
      notify: 
      - restart-mysql
      # - send-mail pour donner un exemple de chainage

    - name: Copie d'une clé RSA publique
      when: user is defined # tâche exécutée conditionnellement, ici si user est défini
      authorized_key:
        user: '{{ user }}'
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  
  handlers:
  - name: restart-mysql
    service:
      name: mysql
      state: restarted